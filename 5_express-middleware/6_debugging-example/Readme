Debugging or Debug Mode:
- In our project, we've logger statements written just for the debugging purpose to check if something is
working properly or not. To serve this purpose, we've used consolge.log() function to log all our debugging
messages.

The drawback of using the approach is, these console.log statement is executed all the times when we run our project.
But, sometimes we only want to track or see the statements related to database and not for other features then that's 
possible using 'debug' node package.

'debug' package allows us to control the debug statements from the outside of our application using an environment
variable. More importantly, it we can also determine the level of debugging statements we want to see.
  Eg. Sometimes we're working on a database problem. Perhaps, we only wanna see the debugging statements related to the
      database package. So, we don't have to comeback to the code and modify all the console.log statements by commenting them 
      and uncommenting only database related console.log statements etc.

So, how to use 'debug' module?
- Install debug module using 'npm i debug' command
- Import debug module in our project using require('debug') function
  Note: The require function here returns a function and we can call that function to define a namespace by giving 
  an argument to it as below,
    const startupDebuger = require('debug')('app:startup');

    OR

    const databaseDebugger = require('debug')('app:db');

    By defining these namespace, we can enable debugging statements related to only that specific namespace.
      Eg. set DEBUG=app:startup - To see only startup debugger statements

          OR

          set DEBUG=app:db - To see only db related statements

          OR

          set DEBUG=* - To see all types of debugging statements like startup, db etc..

    Note: Set this environment variable before running your project, then only you will see debugging statements.



Configuration Setting:
- Configuration settings are just a peace of information that is defined separately for each environment.
This is because, as we know, we have different environments for our application like development, production, 
testing etc.

So, each environment can have it's own Configuration settings and we must provide it to run the applicatoin.
  Eg. We might have a scenario where in our development environment we're dealing with 2 different copies of 
      databases but in our production environment we don't need them. 

      So, in such a scenario we will create an environment specific configuration file with individual peace
      of information.

To test these configurations file, run your application as it is with 'nodemon index.js' command.
Note: 
  1. By default we're in a development environment. To get the access to production configurations change
      your environment to 'set NODE_ENV=production' from the command prompt.
  2. We shall not store the application secrets in the configuration files.
     Eg. passwords like information shouldn't be stored in a configuration file. This is because when we check-in
         our code in a source control repositories, that passwords and information is visible to anyone who has 
         access to that source control repositories.

          So, the way we deal with these secrets is by storing them in environment variables.
     In this case of our application, test this by setting an environment variable as 'set app_password=1234'

    Important: In development environment, we manually set this environment variable but in production environment
               we most likely have a configuration panel for storing our environment variables and read them using our config modules. 

  3. In a 'custom-environment-variables.json' file we've mapped our config settings to environment variables. 




Environment Setting:
While working on a real time project we've various environment like development, production, testing etc..

Also, there are some of the features in our application which we don't want to ship to the production and 
want to use only in the development environment for our purpose. 

So, we will enable them only if the environment is development. How to do this? - Check your code for 
morgan package of logging HTTP requests.

To set an environment externally use below command,
  'set NODE_ENV=production'

Note: We've a global variable process which gives us an access to our current environment as below,
        'process.env.NODE_ENV'

      OR,

      app.get('env') method also gives us current environment as equal to above process command.
      Note: If an environment is not set externally then 'app.get('env)' method will return 'development' as a current
            environment.