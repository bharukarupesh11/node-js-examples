const {Movie, validateMovie} = require('../models/movie');// object destructuring to extract all the exported properties by movie model
const {Genre} = require('../models/genre');
const express = require('express');
const router = express.Router();

router.get('/', async function(req, res) {
  try{
        const movies = await Movie.find().sort('name');
        res.status(200).send(movies);
    }catch(exception){
        // 404 - Not Found
        res.status(404).send(exception);
    } 
});


router.post('/', async (req, res) => {
    // validate movie - Return 400 Bad Request for the invalid body
    const { error } = validateMovie(req.body);
    if(error) return res.status(400).send(error);
    
    //Check if the provided movie already exists - If yes, return 403 - Resource already exists
    /*let genre = movie_genres.find( m => m.name.toLowerCase() === req.body.name.toLowerCase());*/
    let movie = await Movie.find({title: req.body.title});
    console.log(movie);
    if(movie.length !== 0) return res.status(403).send(`The movie "${req.body.title}" already exists.`);
    
    const genre = await Genre.find({name: req.body.genreName}); // returns an array of objects 
    if(genre.length === 0) return res.status(400).send('Invalid genre.');
    
    // Add the movie - Here, while creating new Movie object mongoose talks to mongodb driver and then the driver itself generates the id i.e. '_id' for this movie document
    movie = new Movie({ 
        title: req.body.title,
        genre: {
            _id: genre[0]._id,
            name: genre[0].name
        },
        numberInStock: req.body.numberInStock,
        dailyRentalRate: req.body.dailyRentalRate
     });
    
    /** No need to reset 'movie' now to get the created movie object because now we know that the objectid 
     *  is generated by mongodb driver and not by mongodb database. So, when we create a new Movie() object 
     *  mongoose talk to mongodb driver and sets the id immediately on the line 32 before saving the movie to
     *  database that's why we can remove reassignment as below,
     *      // movie = await movie.save(); */  
    await movie.save(); // this itself will work
    
    res.status(200).send(movie);
});


router.put('/:id', async (req, res) => {
    //Validate movie - Return 400 Bad Request for the invalid body
    const { error } = validateMovie(req.body);
    if(error) return res.status(400).send(error);
    
    //Check if the provided movie exists or not - If not, return 404 - Resource not found
    /*let genre = movie_genres.find( m => m.name.toLowerCase() === req.body.name.toLowerCase());*/
    let movie = await Movie.find({_id: req.params.id});
    if(movie.length === 0) return res.status(404).send(`The movie with "${req.params.id}" id does not exists.`);

    // Check if the provided genre exists or not - If not, return 400 - Resource not found
    const genre = await Genre.find({name: req.body.genreName}); // returns an array of objects 
    if(genre.length === 0) return res.status(400).send('Invalid genre.');
    
    // Update movie in DB - Optionally, we can use updateOne() method as well which returns mongoose object but not the updated document
    movie = await Movie.findByIdAndUpdate(
        {_id: req.params.id}, 
        { 
            title: req.body.title,
            genre: {
                _id: genre[0]._id, // This is an actual genre id for the updating genre in the DB
                name: req.body.genreName // updating to new genre name sent by client
            },
            numberInStock: req.body.numberInStock,
            dailyRentalRate: req.body.dailyRentalRate
        },
        { new: true }
    );

    res.status(200).send(movie);
});


router.delete('/:id', async (req, res) => {
    const movie = await Movie.findByIdAndRemove(req.params.id);
    
    if(!movie) 
        return res.status(404).send(`The movie with "${req.params.id}" id does not exists.`);
    
    res.status(200).send(movie);
});


router.get('/:id', async (req, res) => {
    const movie = await Movie.findById(req.params.id);

    if(!movie) 
        return res.status(404).send(`The movie with "${req.params.id}" id does not exists.`);
    
    res.status(200).send(movie);
});

module.exports = router; // exporting a router